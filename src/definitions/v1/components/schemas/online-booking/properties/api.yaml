components:
  schemas:
    # API Request Models
    createPropertyRequest:
      type: object
      properties:
        type:
          $ref: './types.yaml#/components/schemas/propertyType'
        name:
          type: string
          minLength: 3
          maxLength: 100
          example: "Luxury Beach Villa"
        description:
          type: string
          maxLength: 2000
          example: "Beautiful beachfront villa with stunning ocean views"
        location:
          $ref: './types.yaml#/components/schemas/propertyLocation'
        amenities:
          $ref: './types.yaml#/components/schemas/propertyAmenities'
        rules:
          $ref: './types.yaml#/components/schemas/propertyRules'
        pricing:
          $ref: './types.yaml#/components/schemas/propertyPricing'
      required:
        - type
        - name
        - location
        - rules
        - pricing

    updatePropertyRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          maxLength: 2000
        location:
          $ref: './types.yaml#/components/schemas/propertyLocation'
        amenities:
          $ref: './types.yaml#/components/schemas/propertyAmenities'
        rules:
          $ref: './types.yaml#/components/schemas/propertyRules'
        pricing:
          $ref: './types.yaml#/components/schemas/propertyPricing'

    updatePropertyStatusRequest:
      type: object
      properties:
        status:
          $ref: './types.yaml#/components/schemas/propertyStatus'
      required:
        - status

    # API Response Models
    propertyResponse:
      allOf:
        - $ref: '../common/responses.yaml#/components/schemas/successResponse'
        - type: object
          properties:
            data:
              $ref: './types.yaml#/components/schemas/property'

    propertyListResponse:
      allOf:
        - $ref: '../common/responses.yaml#/components/schemas/listResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: './types.yaml#/components/schemas/property'

    # API Parameters
    propertyQueryParams:
      type: object
      properties:
        type:
          $ref: './types.yaml#/components/schemas/propertyType'
        status:
          $ref: './types.yaml#/components/schemas/propertyStatus'
        location:
          type: object
          properties:
            city:
              type: string
              example: "New York"
            country:
              type: string
              example: "USA"
            radius:
              type: number
              minimum: 0
              example: 5
            coordinates:
              $ref: './types.yaml#/components/schemas/propertyLocation/properties/coordinates'
        priceRange:
          type: object
          properties:
            min:
              type: number
              minimum: 0
              example: 100
            max:
              type: number
              minimum: 0
              example: 500
            currency:
              type: string
              pattern: '^[A-Z]{3}$'
              example: "USD"
        amenities:
          type: array
          items:
            type: string
          example: ["wifi", "pool"]
        pagination:
          $ref: '../common/parameters.yaml#/components/schemas/paginationRequest'
        sorting:
          $ref: '../common/parameters.yaml#/components/schemas/sortingRequest'
        search:
          $ref: '../common/parameters.yaml#/components/schemas/searchFilter' 